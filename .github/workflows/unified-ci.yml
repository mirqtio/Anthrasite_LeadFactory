name: Anthrasite Lead-Factory Unified CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Generate file list for checks
        run: |
          # Create a list of files to check, excluding those specified in pre-commit config
          # This ensures CI checks match local pre-commit behavior
          find . \( -name ".venv" -o -name "venv" \) -prune -o -type f -name "*.py" -print | grep -v "tests/" | grep -v ".cursor/" | grep -v ".github/workflows/" | grep -v "bin/enrich.py" | grep -v "bin/dedupe.py" > files_to_check.txt
          echo "Files to check:"
          cat files_to_check.txt

      - name: Run pre-commit on selected files
        run: |
          # Run pre-commit with specific hooks that are known to work reliably in CI
          pre-commit run ruff --files $(cat files_to_check.txt)
          pre-commit run black --files $(cat files_to_check.txt)
          pre-commit run bandit --files $(cat files_to_check.txt)
          # Run on all files, let config exclude
          pre-commit run --all-files

  lint:
    name: Lint Code
    needs: pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort ruff bandit mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Generate file list for linting
        run: |
          # Create a list of files to check, excluding those specified in pre-commit config
          find . \( -name ".venv" -o -name "venv" \) -prune -o -type f -name "*.py" -print | grep -v "tests/" | grep -v ".cursor/" | grep -v ".github/workflows/" | grep -v "bin/enrich.py" | grep -v "bin/dedupe.py" > files_to_check.txt
          echo "Files to lint:"
          cat files_to_check.txt

      - name: Lint with ruff, black, bandit, flake8, and mypy
        run: |
          FILES_TO_LINT=$(cat files_to_check.txt | tr '\n' ' ')
          if [ -z "$FILES_TO_LINT" ]; then
            echo "No files to lint based on files_to_check.txt. Skipping linting."
            exit 0
          fi
          echo "Running Ruff on $FILES_TO_LINT..."
          ruff check $FILES_TO_LINT --fix
          echo "Running Black on $FILES_TO_LINT..."
          black $FILES_TO_LINT
          echo "Running Bandit... (runs on ., excludes via config or -x)"
          bandit -r . -x tests -ll # Bandit can use its own exclusion, or a .bandit file
          echo "Running Flake8 on $FILES_TO_LINT..."
          flake8 $FILES_TO_LINT
          echo "Running Mypy on $FILES_TO_LINT..."
          # Mypy might need specific configuration for paths if not run on the whole project
          # For now, let's try with the file list. If it fails, it might need to run on '.' or have paths configured.
          mypy $FILES_TO_LINT --ignore-missing-imports
          echo "Linting checks finished. Any failures above should be addressed."

  test-core:
    name: Core Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: leadfactory_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Setup test environment
        run: |
          # Create necessary directories
          mkdir -p data/html_storage
          mkdir -p data/supabase_usage

          # Setup test database
          python scripts/minimal_db_setup.py --verbose

          # Create .env file with test values
          cp .env.example .env
          sed -i 's/your_api_key_here/test_api_key/g' .env
          sed -i 's/your_sendgrid_api_key_here/test_sendgrid_key/g' .env
          sed -i 's/your_supabase_key_here/test_supabase_key/g' .env

          # Set environment variables for tests
          echo "BOUNCE_RATE_THRESHOLD=0.02" >> .env
          echo "SPAM_RATE_THRESHOLD=0.01" >> .env
          echo "HEALTH_CHECK_FAILURES_THRESHOLD=2" >> .env
          echo "RETENTION_DAYS_DB_BACKUPS=90" >> .env
          echo "MONTHLY_BUDGET=250" >> .env

      - name: Run core tests
        if: always() # Always run, even if previous steps had soft failures
        run: |
          echo "Running core tests..."
          pytest -n auto --dist loadscope --cov=core --cov-report term-missing --cov-report xml --cov-fail-under=80 tests/core/
          echo "Core tests finished. Any failures above should be addressed."

  build-docker:
    name: Build Docker Image
    needs: test-core
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: anthrasite-lead-factory:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify on Completion
    needs: [pre-commit, lint, test-core, build-docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        id: check
        run: |
          if [ "${{ needs.pre-commit.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.test-core.result }}" == "success" ] && [ "${{ needs.build-docker.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify on success
        if: steps.check.outputs.status == 'success'
        run: |
          echo "CI pipeline completed successfully!"
          # Add notification mechanism here (e.g., Slack, email)

      - name: Notify on failure
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "CI pipeline failed!"
          # Add notification mechanism here (e.g., Slack, email)
