#!/usr/bin/env python3
"""
Ensure Python Path

This script ensures that the Python path is correctly set up for tests.
It creates a .pth file in the site-packages directory that adds the project root to the Python path.
This helps resolve import issues in tests without requiring sys.path modifications in each test file.

Usage:
    python scripts/ensure_python_path.py
"""

import os
import site
import sys
from pathlib import Path

def main():
    """Main function."""
    print("Ensuring Python path is correctly set up...")
    
    # Get project root
    project_root = Path(__file__).parent.parent.absolute()
    print(f"Project root: {project_root}")
    
    # Get site-packages directory
    site_packages_dir = site.getsitepackages()[0]
    print(f"Site-packages directory: {site_packages_dir}")
    
    # Create .pth file
    pth_file = os.path.join(site_packages_dir, "anthrasite_leadfactory.pth")
    
    # Check if we have write permission
    try:
        with open(pth_file, "w") as f:
            f.write(str(project_root))
        print(f"Created {pth_file}")
    except PermissionError:
        # Try user site-packages instead
        user_site = site.getusersitepackages()
        print(f"No permission to write to {site_packages_dir}, trying user site-packages: {user_site}")
        
        # Create user site-packages directory if it doesn't exist
        os.makedirs(user_site, exist_ok=True)
        
        # Create .pth file in user site-packages
        user_pth_file = os.path.join(user_site, "anthrasite_leadfactory.pth")
        with open(user_pth_file, "w") as f:
            f.write(str(project_root))
        print(f"Created {user_pth_file}")
    
    # Create a conftest.py file in the project root if it doesn't exist
    conftest_path = project_root / "conftest.py"
    if not conftest_path.exists():
        with open(conftest_path, "w") as f:
            f.write("""
# This file is automatically generated by scripts/ensure_python_path.py
# It ensures that the project root is in the Python path for tests

import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))
""")
        print(f"Created {conftest_path}")
    
    # Create a pytest.ini file in the project root if it doesn't exist
    pytest_ini_path = project_root / "pytest.ini"
    if not pytest_ini_path.exists():
        with open(pytest_ini_path, "w") as f:
            f.write("""
[pytest]
python_paths = .
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    slow: marks tests as slow (deselect with '-k "not slow"')
    bdd: marks tests as BDD tests
""")
        print(f"Created {pytest_ini_path}")
    
    print("\nPython path setup complete!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
