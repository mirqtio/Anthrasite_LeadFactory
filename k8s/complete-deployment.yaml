# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: leadfactory

---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: leadfactory-config
  namespace: leadfactory
data:
  REDIS_URL: "redis://redis-service:6379"
  KAFKA_BROKERS: "kafka-service:9092"
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "leadfactory"
  SERVICE_DISCOVERY_ENABLED: "true"
  LOG_LEVEL: "INFO"
  CORS_ORIGINS: "https://app.leadfactory.com"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: leadfactory-secrets
  namespace: leadfactory
type: Opaque
stringData:
  POSTGRES_USER: "leadfactory"
  POSTGRES_PASSWORD: "change-me-in-production"  # pragma: allowlist secret
  JWT_SECRET_KEY: "change-me-in-production"  # pragma: allowlist secret
  STRIPE_SECRET_KEY: "sk_test_change-me"  # pragma: allowlist secret
  STRIPE_WEBHOOK_SECRET: "whsec_change-me"  # pragma: allowlist secret
  SENDGRID_API_KEY: "change-me"  # pragma: allowlist secret
  OPENAI_API_KEY: "change-me"  # pragma: allowlist secret
  API_KEYS: "change-me-1,change-me-2"  # pragma: allowlist secret

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: leadfactory
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: leadfactory-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: leadfactory-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: leadfactory-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: leadfactory
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: leadfactory
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: leadfactory
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Kafka StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: leadfactory
spec:
  serviceName: kafka-service
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.5.0
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-service:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
# Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: leadfactory
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092
  type: ClusterIP

---
# Zookeeper Deployment (for Kafka)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: leadfactory
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.5.0
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Zookeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: leadfactory
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
    targetPort: 2181
  type: ClusterIP

---
# Scraper Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scraper-service
  namespace: leadfactory
spec:
  replicas: 3
  selector:
    matchLabels:
      app: scraper-service
  template:
    metadata:
      labels:
        app: scraper-service
    spec:
      containers:
      - name: scraper
        image: leadfactory/scraper-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
        env:
        - name: SERVICE_NAME
          value: "scraper-service"
        - name: SERVICE_PORT
          value: "8001"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Scraper Service
apiVersion: v1
kind: Service
metadata:
  name: scraper-service
  namespace: leadfactory
spec:
  selector:
    app: scraper-service
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP

---
# Enrichment Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enrich-service
  namespace: leadfactory
spec:
  replicas: 3
  selector:
    matchLabels:
      app: enrich-service
  template:
    metadata:
      labels:
        app: enrich-service
    spec:
      containers:
      - name: enrich
        image: leadfactory/enrich-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
        env:
        - name: SERVICE_NAME
          value: "enrich-service"
        - name: SERVICE_PORT
          value: "8002"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Enrichment Service
apiVersion: v1
kind: Service
metadata:
  name: enrich-service
  namespace: leadfactory
spec:
  selector:
    app: enrich-service
  ports:
  - port: 8002
    targetPort: 8002
  type: ClusterIP

---
# Deduplication Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dedupe-service
  namespace: leadfactory
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dedupe-service
  template:
    metadata:
      labels:
        app: dedupe-service
    spec:
      containers:
      - name: dedupe
        image: leadfactory/dedupe-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
        env:
        - name: SERVICE_NAME
          value: "dedupe-service"
        - name: SERVICE_PORT
          value: "8003"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Deduplication Service
apiVersion: v1
kind: Service
metadata:
  name: dedupe-service
  namespace: leadfactory
spec:
  selector:
    app: dedupe-service
  ports:
  - port: 8003
    targetPort: 8003
  type: ClusterIP

---
# Scoring Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: score-service
  namespace: leadfactory
spec:
  replicas: 2
  selector:
    matchLabels:
      app: score-service
  template:
    metadata:
      labels:
        app: score-service
    spec:
      containers:
      - name: score
        image: leadfactory/score-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8004
        env:
        - name: SERVICE_NAME
          value: "score-service"
        - name: SERVICE_PORT
          value: "8004"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Scoring Service
apiVersion: v1
kind: Service
metadata:
  name: score-service
  namespace: leadfactory
spec:
  selector:
    app: score-service
  ports:
  - port: 8004
    targetPort: 8004
  type: ClusterIP

---
# Mockup Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mockup-service
  namespace: leadfactory
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mockup-service
  template:
    metadata:
      labels:
        app: mockup-service
    spec:
      containers:
      - name: mockup
        image: leadfactory/mockup-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8005
        env:
        - name: SERVICE_NAME
          value: "mockup-service"
        - name: SERVICE_PORT
          value: "8005"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8005
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8005
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Mockup Service
apiVersion: v1
kind: Service
metadata:
  name: mockup-service
  namespace: leadfactory
spec:
  selector:
    app: mockup-service
  ports:
  - port: 8005
    targetPort: 8005
  type: ClusterIP

---
# Email Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-service
  namespace: leadfactory
spec:
  replicas: 2
  selector:
    matchLabels:
      app: email-service
  template:
    metadata:
      labels:
        app: email-service
    spec:
      containers:
      - name: email
        image: leadfactory/email-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8006
        env:
        - name: SERVICE_NAME
          value: "email-service"
        - name: SERVICE_PORT
          value: "8006"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8006
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8006
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Email Service
apiVersion: v1
kind: Service
metadata:
  name: email-service
  namespace: leadfactory
spec:
  selector:
    app: email-service
  ports:
  - port: 8006
    targetPort: 8006
  type: ClusterIP

---
# Orchestrator Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator-service
  namespace: leadfactory
spec:
  replicas: 2
  selector:
    matchLabels:
      app: orchestrator-service
  template:
    metadata:
      labels:
        app: orchestrator-service
    spec:
      containers:
      - name: orchestrator
        image: leadfactory/orchestrator-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        env:
        - name: SERVICE_NAME
          value: "orchestrator-service"
        - name: SERVICE_PORT
          value: "8000"
        envFrom:
        - configMapRef:
            name: leadfactory-config
        - secretRef:
            name: leadfactory-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Orchestrator Service
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-service
  namespace: leadfactory
spec:
  selector:
    app: orchestrator-service
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# Main API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: leadfactory
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: leadfactory
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer

---
# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: leadfactory
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        upstream scraper {
            server scraper-service:8001;
        }

        upstream enrich {
            server enrich-service:8002;
        }

        upstream dedupe {
            server dedupe-service:8003;
        }

        upstream score {
            server score-service:8004;
        }

        upstream mockup {
            server mockup-service:8005;
        }

        upstream email {
            server email-service:8006;
        }

        upstream orchestrator {
            server orchestrator-service:8000;
        }

        server {
            listen 80;

            location /api/v1/scrape {
                proxy_pass http://scraper;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location /api/v1/enrich {
                proxy_pass http://enrich;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location /api/v1/dedupe {
                proxy_pass http://dedupe;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location /api/v1/score {
                proxy_pass http://score;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location /api/v1/mockup {
                proxy_pass http://mockup;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location /api/v1/email {
                proxy_pass http://email;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location / {
                proxy_pass http://orchestrator;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }

            location /health {
                return 200 "healthy\n";
            }
        }
    }

---
# Horizontal Pod Autoscalers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: scraper-hpa
  namespace: leadfactory
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: scraper-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: enrich-hpa
  namespace: leadfactory
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: enrich-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: leadfactory
spec:
  podSelector: {}
  policyTypes:
  - Ingress

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-internal-traffic
  namespace: leadfactory
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: leadfactory

---
# Monitoring: Prometheus ServiceMonitor
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: leadfactory-services
  namespace: leadfactory
spec:
  selector:
    matchLabels:
      monitoring: "true"
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
