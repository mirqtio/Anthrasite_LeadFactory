version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - scraper-service
      - enrichment-service
      - deduplication-service
      - scoring-service
      - mockup-service
      - email-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - leadfactory-network

  # Scraper Service
  scraper-service:
    build:
      context: .
      dockerfile: docker/scraper/Dockerfile
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=scraper-service
      - WORKER_TYPE=scraper
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - leadfactory-network

  # Enrichment Service
  enrichment-service:
    build:
      context: .
      dockerfile: docker/enrichment/Dockerfile
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=enrichment-service
      - WORKER_TYPE=enrichment
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - CHROMIUM_PATH=/usr/bin/chromium
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - leadfactory-network

  # Deduplication Service
  deduplication-service:
    build:
      context: .
      dockerfile: docker/deduplication/Dockerfile
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=deduplication-service
      - WORKER_TYPE=deduplication
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - OLLAMA_HOST=0.0.0.0:11434
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    deploy:
      replicas: 1  # Resource intensive, fewer replicas
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 4G
    volumes:
      - ollama-models:/home/appuser/.ollama
    networks:
      - leadfactory-network

  # Scoring Service
  scoring-service:
    build:
      context: .
      dockerfile: docker/scoring/Dockerfile
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=scoring-service
      - WORKER_TYPE=scoring
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    deploy:
      replicas: 3  # Lightweight, many replicas
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
    networks:
      - leadfactory-network

  # Mockup Service
  mockup-service:
    build:
      context: .
      dockerfile: docker/mockup/Dockerfile
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=mockup-service
      - WORKER_TYPE=mockup
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
      - DISPLAY=:99
      - CHROMIUM_PATH=/usr/bin/chromium
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    # GPU runtime support (requires nvidia-docker)
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - leadfactory-network

  # Email Service
  email-service:
    build:
      context: .
      dockerfile: docker/email/Dockerfile
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=email-service
      - WORKER_TYPE=email
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
    networks:
      - leadfactory-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=leadfactory
      - POSTGRES_USER=leadfactory
      - POSTGRES_PASSWORD=leadfactory_password
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leadfactory"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - leadfactory-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - leadfactory-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    restart: unless-stopped
    networks:
      - leadfactory-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - leadfactory-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - leadfactory-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./etc/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - leadfactory-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - leadfactory-network

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  prometheus-data:
  grafana-data:
  ollama-models:

networks:
  leadfactory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
